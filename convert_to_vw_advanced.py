import re
import os

def convert_css_to_vw_vh(css_content, base_width=1920, base_height=1080):
    """
    –£–ª—É—á—à–µ–Ω–Ω–∞—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è CSS —Ä–∞–∑–º–µ—Ä–æ–≤ –≤ vw/vh
    """
    
    # –°–≤–æ–π—Å—Ç–≤–∞, –∫–æ—Ç–æ—Ä—ã–µ –ª—É—á—à–µ –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –≤ vh
    vh_properties = {
        'height', 'min-height', 'max-height', 'top', 'bottom',
        'margin-top', 'margin-bottom', 'padding-top', 'padding-bottom',
        'line-height'
    }
    
    # –°–≤–æ–π—Å—Ç–≤–∞, –∫–æ—Ç–æ—Ä—ã–µ –ª—É—á—à–µ –æ—Å—Ç–∞–≤–∏—Ç—å –≤ px (–º–µ–ª–∫–∏–µ –¥–µ—Ç–∞–ª–∏)
    px_properties = {
        'border-width', 'border-radius', 'box-shadow', 'text-shadow',
        'letter-spacing', 'word-spacing', 'outline-width'
    }
    
    # –°–≤–æ–π—Å—Ç–≤–∞, –∫–æ—Ç–æ—Ä—ã–µ –ª—É—á—à–µ –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –≤ vw
    vw_properties = {
        'width', 'max-width', 'min-width', 'left', 'right',
        'margin-left', 'margin-right', 'padding-left', 'padding-right',
        'font-size', 'border-left-width', 'border-right-width'
    }
    
    def convert_value(value, unit, target_unit, base_size):
        """–ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç –∑–Ω–∞—á–µ–Ω–∏–µ –≤ –Ω—É–∂–Ω—É—é –µ–¥–∏–Ω–∏—Ü—É"""
        if unit == 'px':
            if target_unit == 'vw':
                return (float(value) / base_width) * 100
            elif target_unit == 'vh':
                return (float(value) / base_height) * 100
        elif unit == 'rem':
            # 1rem = 16px
            px_value = float(value) * 16
            if target_unit == 'vw':
                return (px_value / base_width) * 100
            elif target_unit == 'vh':
                return (px_value / base_height) * 100
        elif unit == 'em':
            # 1em = 16px
            px_value = float(value) * 16
            if target_unit == 'vw':
                return (px_value / base_width) * 100
            elif target_unit == 'vh':
                return (px_value / base_height) * 100
        return float(value)
    
    def process_declaration(match):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç CSS –¥–µ–∫–ª–∞—Ä–∞—Ü–∏—é"""
        property_name = match.group(1).strip()
        value = match.group(2).strip()
        
        # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–≤–æ–π—Å—Ç–≤–∞, –∫–æ—Ç–æ—Ä—ã–µ –¥–æ–ª–∂–Ω—ã –æ—Å—Ç–∞—Ç—å—Å—è –≤ px
        if property_name in px_properties:
            return match.group(0)
        
        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –∑–Ω–∞—á–µ–Ω–∏—è
        if property_name in vh_properties:
            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ vh
            if 'px' in value:
                new_value = re.sub(r'(\d+(?:\.\d+)?)px', 
                    lambda m: f"{convert_value(m.group(1), 'px', 'vh', base_height):.4f}vh", value)
                return f"{property_name}: {new_value}"
            elif 'rem' in value:
                new_value = re.sub(r'(\d+(?:\.\d+)?)rem', 
                    lambda m: f"{convert_value(m.group(1), 'rem', 'vh', base_height):.4f}vh", value)
                return f"{property_name}: {new_value}"
            elif 'em' in value:
                new_value = re.sub(r'(\d+(?:\.\d+)?)em', 
                    lambda m: f"{convert_value(m.group(1), 'em', 'vh', base_height):.4f}vh", value)
                return f"{property_name}: {new_value}"
        
        elif property_name in vw_properties:
            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ vw
            if 'px' in value:
                new_value = re.sub(r'(\d+(?:\.\d+)?)px', 
                    lambda m: f"{convert_value(m.group(1), 'px', 'vw', base_width):.4f}vw", value)
                return f"{property_name}: {new_value}"
            elif 'rem' in value:
                new_value = re.sub(r'(\d+(?:\.\d+)?)rem', 
                    lambda m: f"{convert_value(m.group(1), 'rem', 'vw', base_width):.4f}vw", value)
                return f"{property_name}: {new_value}"
            elif 'em' in value:
                new_value = re.sub(r'(\d+(?:\.\d+)?)em', 
                    lambda m: f"{convert_value(m.group(1), 'em', 'vw', base_width):.4f}vw", value)
                return f"{property_name}: {new_value}"
        
        # –î–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Å–≤–æ–π—Å—Ç–≤ –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ vw
        else:
            if 'px' in value:
                new_value = re.sub(r'(\d+(?:\.\d+)?)px', 
                    lambda m: f"{convert_value(m.group(1), 'px', 'vw', base_width):.4f}vw", value)
                return f"{property_name}: {new_value}"
            elif 'rem' in value:
                new_value = re.sub(r'(\d+(?:\.\d+)?)rem', 
                    lambda m: f"{convert_value(m.group(1), 'rem', 'vw', base_width):.4f}vw", value)
                return f"{property_name}: {new_value}"
            elif 'em' in value:
                new_value = re.sub(r'(\d+(?:\.\d+)?)em', 
                    lambda m: f"{convert_value(m.group(1), 'em', 'vw', base_width):.4f}vw", value)
                return f"{property_name}: {new_value}"
        
        return match.group(0)
    
    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º CSS –¥–µ–∫–ª–∞—Ä–∞—Ü–∏–∏
    pattern = r'([a-zA-Z-]+):\s*([^;]+);'
    converted_css = re.sub(pattern, process_declaration, css_content)
    
    return converted_css

def process_css_file(input_file, output_file, base_width=1920, base_height=1080):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç CSS —Ñ–∞–π–ª –∏ —Å–æ–∑–¥–∞–µ—Ç –∞–¥–∞–ø—Ç–∏–≤–Ω—É—é –≤–µ—Ä—Å–∏—é
    """
    try:
        # –ß–∏—Ç–∞–µ–º –∏—Å—Ö–æ–¥–Ω—ã–π CSS —Ñ–∞–π–ª
        with open(input_file, 'r', encoding='utf-8') as f:
            css_content = f.read()
        
        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ vw/vh
        converted_css = convert_css_to_vw_vh(css_content, base_width, base_height)
        
        # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        with open(output_file, 'w', encoding='utf-8') as f:
            f.write(converted_css)
        
        print(f"‚úÖ CSS —Ñ–∞–π–ª —É—Å–ø–µ—à–Ω–æ –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω!")
        print(f"üìÅ –í—Ö–æ–¥–Ω–æ–π —Ñ–∞–π–ª: {input_file}")
        print(f"üìÅ –í—ã—Ö–æ–¥–Ω–æ–π —Ñ–∞–π–ª: {output_file}")
        print(f"üñ•Ô∏è  –ë–∞–∑–æ–≤–∞—è —à–∏—Ä–∏–Ω–∞: {base_width}px")
        print(f"üñ•Ô∏è  –ë–∞–∑–æ–≤–∞—è –≤—ã—Å–æ—Ç–∞: {base_height}px")
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        original_px = len(re.findall(r'\d+px', css_content))
        converted_vw = len(re.findall(r'\d+\.\d+vw', converted_css))
        converted_vh = len(re.findall(r'\d+\.\d+vh', converted_css))
        
        print(f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:")
        print(f"   –ò—Å—Ö–æ–¥–Ω—ã—Ö px: {original_px}")
        print(f"   –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ –≤ vw: {converted_vw}")
        print(f"   –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ –≤ vh: {converted_vh}")
        
    except FileNotFoundError:
        print(f"‚ùå –§–∞–π–ª {input_file} –Ω–µ –Ω–∞–π–¥–µ–Ω!")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")

if __name__ == "__main__":
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∏
    input_css = "assets/style/style.css"
    output_css = "assets/style/style_adaptive.css"
    base_width = 1920  # –±–∞–∑–æ–≤–∞—è —à–∏—Ä–∏–Ω–∞ —ç–∫—Ä–∞–Ω–∞
    base_height = 1080  # –±–∞–∑–æ–≤–∞—è –≤—ã—Å–æ—Ç–∞ —ç–∫—Ä–∞–Ω–∞
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—é
    process_css_file(input_css, output_css, base_width, base_height)
    
    print("\nüìù –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:")
    print("1. –ó–∞–ø—É—Å—Ç–∏—Ç–µ —Å–∫—Ä–∏–ø—Ç: python convert_to_vw_advanced.py")
    print("2. –ü–æ–ª—É—á–∏—Ç–µ –∞–¥–∞–ø—Ç–∏–≤–Ω—ã–π CSS —Ñ–∞–π–ª: style_adaptive.css")
    print("3. –ó–∞–º–µ–Ω–∏—Ç–µ —Å—Å—ã–ª–∫—É –≤ HTML –Ω–∞ –Ω–æ–≤—ã–π —Ñ–∞–π–ª")
    print("\nüí° –û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏:")
    print("- –í—ã—Å–æ—Ç–Ω—ã–µ —Å–≤–æ–π—Å—Ç–≤–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É—é—Ç—Å—è –≤ vh")
    print("- –®–∏—Ä–∏–Ω–Ω—ã–µ —Å–≤–æ–π—Å—Ç–≤–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É—é—Ç—Å—è –≤ vw")
    print("- –ú–µ–ª–∫–∏–µ –¥–µ—Ç–∞–ª–∏ (border, shadow) –æ—Å—Ç–∞—é—Ç—Å—è –≤ px")
    print("- –†–∞–∑–º–µ—Ä—ã —à—Ä–∏—Ñ—Ç–æ–≤ –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É—é—Ç—Å—è –≤ vw")
